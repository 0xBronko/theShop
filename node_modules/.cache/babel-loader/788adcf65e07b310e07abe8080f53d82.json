{"ast":null,"code":"var _jsxFileName = \"/Users/Bronko/Desktop/capstone/theShop/src/components/sign-up/sign-up.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport { createAuthUserWithEmailAndPassword, createUserDocumentFromAuth } from \"../../utils/firebase/firebase.utils\";\nimport Button from \"../button/button.component\";\nimport FormInput from \"../form-input/form-input.component\";\nimport { UserContext } from \"../../context/user.context\";\nimport \"./sign-up-form.styles.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultFormFields = {\n  displayName: \"\",\n  mail: \"\",\n  password: \"\",\n  confirmPassword: \"\"\n};\n\nconst SignInForm = () => {\n  _s();\n\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const {\n    displayName,\n    mail,\n    password,\n    confirmPassword\n  } = formFields; // damit wir die in den input feldern direkt targetieren können\n  // hierduch wird der state aber nichtgeändert, sondern nur entsprehcnend targetiert. geändert erst unter setFormFields\n  // console.log(formFields)\n\n  const {\n    setCurrentUser\n  } = useContext(UserContext);\n\n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    console.log(\"geklappt\");\n\n    if (password !== confirmPassword) {\n      alert(\"Passwörter passen nicht zusammen\");\n      return;\n    } // try and catch weil we call den firebase server und das kann natürlich fehlschlagen\n\n\n    try {\n      const {\n        user\n      } = await createAuthUserWithEmailAndPassword(mail, password); //destructured von formFields\n\n      setCurrentUser(user); // wenn ein user sich jetzt für das erste mal registriert, ist der user auch im context gespeichert\n\n      await createUserDocumentFromAuth(user, {\n        displayName\n      }); // erst hiermit wird der user wirklich in die Datenbank gepushed. Vorher immer nur im auth zu sehen\n\n      resetFormFields();\n    } catch (error) {\n      if (error.code === \"auth/email-already-in-use\") {\n        alert(\"die mail hast du bereits genutzt junge...\");\n      }\n\n      console.log(\"fehler beim erstellen des users\", error);\n    }\n\n    ;\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    console.log(name);\n    setFormFields({ ...formFields,\n      // alle nicht geänderten Felder bleiben so, wie sie aktuell sind mit ...formFields\n      [name]: value // Computed Property Names --> [name]: holt sich den namen des aktuell triggernden InputFeldes -- Dynamic Keys\n\n    }); // value ist der aktuelle wert des entsprechenden Inputfelds (mail: \"wert, der gerade ins mail feld eingetragen wird\")\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sign-up-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Don't have an account?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Registriere dich mit deiner Email und Passwort an\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        label: \"Display Name\",\n        required: true,\n        type: \"text\",\n        name: \"displayName\",\n        onChange: handleChange,\n        value: displayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        label: \"E-Mail\",\n        required: true,\n        type: \"mail\",\n        name: \"mail\",\n        onChange: handleChange,\n        value: mail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        label: \"Passwort\",\n        required: true,\n        type: \"password\",\n        name: \"password\",\n        onChange: handleChange,\n        value: password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        label: \"Passwort bestätigen\",\n        required: true,\n        type: \"password\",\n        name: \"confirmPassword\",\n        onChange: handleChange,\n        value: confirmPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Abschicken\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SignInForm, \"BNNXrV0qdqCY7HK89zzO2SPvV4c=\");\n\n_c = SignInForm;\nexport default SignInForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignInForm\");","map":{"version":3,"sources":["/Users/Bronko/Desktop/capstone/theShop/src/components/sign-up/sign-up.component.jsx"],"names":["React","useContext","useState","createAuthUserWithEmailAndPassword","createUserDocumentFromAuth","Button","FormInput","UserContext","defaultFormFields","displayName","mail","password","confirmPassword","SignInForm","formFields","setFormFields","setCurrentUser","resetFormFields","handleSubmit","event","preventDefault","console","log","alert","user","error","code","handleChange","name","value","target"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\n\nimport { createAuthUserWithEmailAndPassword, createUserDocumentFromAuth } from \"../../utils/firebase/firebase.utils\";\nimport Button from \"../button/button.component\";\nimport FormInput from \"../form-input/form-input.component\";\nimport { UserContext } from \"../../context/user.context\"\n\nimport \"./sign-up-form.styles.scss\";\n\n\nconst defaultFormFields = {\n    displayName: \"\", \n    mail: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n};\n\n\nconst SignInForm = () => {\n    const [formFields, setFormFields] = useState(defaultFormFields);\n    const { displayName, mail, password, confirmPassword} = formFields;  // damit wir die in den input feldern direkt targetieren können\n                                                                         // hierduch wird der state aber nichtgeändert, sondern nur entsprehcnend targetiert. geändert erst unter setFormFields\n\n    // console.log(formFields)\n\n    const { setCurrentUser } = useContext(UserContext)\n\n    const resetFormFields = () => {\n        setFormFields(defaultFormFields);\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        console.log(\"geklappt\")        \n        if(password !== confirmPassword) {\n            alert(\"Passwörter passen nicht zusammen\");\n            return;\n        }\n\n        // try and catch weil we call den firebase server und das kann natürlich fehlschlagen\n        try {\n            const {user} = await createAuthUserWithEmailAndPassword(mail, password); //destructured von formFields\n\n            setCurrentUser(user); // wenn ein user sich jetzt für das erste mal registriert, ist der user auch im context gespeichert\n\n            await createUserDocumentFromAuth(user, {displayName}); // erst hiermit wird der user wirklich in die Datenbank gepushed. Vorher immer nur im auth zu sehen\n            resetFormFields();\n        } catch(error) {\n            if(error.code === \"auth/email-already-in-use\") {\n                alert(\"die mail hast du bereits genutzt junge...\");\n            }\n            console.log(\"fehler beim erstellen des users\" ,error);\n        };\n\n    }\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        console.log(name)\n\n        setFormFields({                     \n            ...formFields,                  // alle nicht geänderten Felder bleiben so, wie sie aktuell sind mit ...formFields\n            [name]: value                   // Computed Property Names --> [name]: holt sich den namen des aktuell triggernden InputFeldes -- Dynamic Keys\n        })                                  // value ist der aktuelle wert des entsprechenden Inputfelds (mail: \"wert, der gerade ins mail feld eingetragen wird\")\n    }                                                                  \n\n    return (\n        <div className=\"sign-up-container\">\n            <h2>Don't have an account?</h2>\n             <span>Registriere dich mit deiner Email und Passwort an</span>\n            <form onSubmit={handleSubmit}>\n                <FormInput label={\"Display Name\"} required type=\"text\" name=\"displayName\" onChange={handleChange} value={displayName} />\n                <FormInput label={\"E-Mail\"} required type=\"mail\" name=\"mail\" onChange={handleChange} value={mail} />\n                <FormInput label={\"Passwort\"} required type=\"password\" name=\"password\" onChange={handleChange} value={password} />\n                <FormInput label={\"Passwort bestätigen\"} required type=\"password\" name=\"confirmPassword\" onChange={handleChange} value={confirmPassword} />\n\n                {/* <label htmlFor=\"displayName\">Display Name</label>\n                <input required type=\"text\" name=\"displayName\" onChange={handleChange} value={displayName} />\n\n                <label htmlFor=\"mail\">E-Mail</label>\n                <input required type=\"email\" name=\"mail\" onChange={handleChange} value={mail} />\n\n                <label htmlFor=\"password\">Passwort</label>\n                <input required type=\"password\" name=\"password\" onChange={handleChange} value={password} />\n\n                <label htmlFor=\"confirmPassword\">Passwort</label>\n                <input required type=\"password\" name=\"confirmPassword\" onChange={handleChange} value={confirmPassword} /> */}\n                <Button type=\"submit\" >Abschicken</Button>\n            </form>\n        </div>\n    )\n}\n\nexport default SignInForm;"]},"metadata":{},"sourceType":"module"}