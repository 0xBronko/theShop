{"ast":null,"code":"var _jsxFileName = \"/Users/Bronko/Desktop/capstone/theShop/src/context/cart.context.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  // find if cartItems contains productstoadd\n  // .find mehtod retuns boolean, und es soll nur true returnen, wenn bisherige cartitems id mit producttoaddId matched\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id); // if found, increment quantity also wenn in der Zeile hierüber ein cartItem gefunden wurde\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } // wenn das item genau mit dem addedItem id übereinstimmt, soll quantity addiert werden\n    : cartItem // ansonsten soll das item einfach zum array neu hinzugefügt werden\n    );\n  } // return new array with modified cartitems/ new cart item\n  // added product ist eine neues Produkt:=================================\n\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }]; // wir erstellen ein neues array mit allen bisherigen cartitems, den products to add und quanitity extra\n};\n\nconst removeCartItem = (cartItems, productToRemove) => {\n  // const remainingCartItems = cartItems.find(cartItem => cartItem.id !== productToRemove.id);\n  // console.log(remainingCartItems.length)\n  // if (cartItems.length === 0) {return(<h1>Warenkorb ist leer</h1>)}\n  // else {return [remainingCartItems];}\n  return cartItems.map(cartItem => {\n    cartItem.id !== productToRemove.id ? { ...cartItem\n    } : console.log(\"gelöscht\");\n  });\n};\n\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  //also nicht den state setzen sondern addieren(das war mein Problem) -> nicht über useState\n  // selectedProducts: [],\n  // setSelectedProducts: () => null,\n  cartCount: 0,\n  removeItemFromCart: () => {}\n});\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // const [selectedProducts, setSelectedProducts] = useState(null);\n  // const value = {selectedProducts, setSelectedProducts};\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n  const [cartCount, setCartCount] = useState(0);\n  useEffect(() => {\n    const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n    setCartCount(newCartCount);\n  }, [cartItems]);\n\n  const addItemToCart = productToAdd => {\n    setCartItems(addCartItem(cartItems, productToAdd));\n  };\n\n  const removeItemFromCart = productToRemove => {\n    setCartItems(removeCartItem(cartItems, productToRemove));\n  };\n\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    cartItems,\n    cartCount,\n    removeItemFromCart\n  }; // console.log(selectedProducts);\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"1STVRVZJMMTq6OZavO9o7qwZdno=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/Bronko/Desktop/capstone/theShop/src/context/cart.context.jsx"],"names":["React","createContext","useEffect","useState","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","productToRemove","console","log","CartContext","isCartOpen","setIsCartOpen","addItemToCart","cartCount","removeItemFromCart","CartProvider","children","setCartItems","setCartCount","newCartCount","reduce","total","value"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\n\n\nconst addCartItem = (cartItems, productToAdd) => {\n    // find if cartItems contains productstoadd\n    // .find mehtod retuns boolean, und es soll nur true returnen, wenn bisherige cartitems id mit producttoaddId matched\n    const existingCartItem = cartItems.find((cartItem) => cartItem.id === productToAdd.id);\n\n    // if found, increment quantity also wenn in der Zeile hierüber ein cartItem gefunden wurde\n    if(existingCartItem) {\n        return cartItems.map((cartItem) => \n            cartItem.id === productToAdd.id\n                ? { ...cartItem, quantity: cartItem.quantity + 1 } // wenn das item genau mit dem addedItem id übereinstimmt, soll quantity addiert werden\n                : cartItem  // ansonsten soll das item einfach zum array neu hinzugefügt werden\n        ); \n    }\n\n\n    // return new array with modified cartitems/ new cart item\n    // added product ist eine neues Produkt:=================================\n    return [...cartItems, {...productToAdd, quantity: 1}]; // wir erstellen ein neues array mit allen bisherigen cartitems, den products to add und quanitity extra\n}\n\nconst removeCartItem = (cartItems, productToRemove) => {\n    // const remainingCartItems = cartItems.find(cartItem => cartItem.id !== productToRemove.id);\n    // console.log(remainingCartItems.length)\n    // if (cartItems.length === 0) {return(<h1>Warenkorb ist leer</h1>)}\n    // else {return [remainingCartItems];}\n\n    return cartItems.map(cartItem => {\n        cartItem.id !== productToRemove.id\n        ? {...cartItem}\n        : console.log(\"gelöscht\")\n    })\n     \n\n}\n\n\nexport const CartContext = createContext({\n    isCartOpen: false,\n    setIsCartOpen: () => {},\n    cartItems: [],\n    addItemToCart: () => {},      //also nicht den state setzen sondern addieren(das war mein Problem) -> nicht über useState\n    // selectedProducts: [],\n    // setSelectedProducts: () => null,\n    cartCount: 0,\n    removeItemFromCart: () => {}\n});\n\n\nexport const CartProvider = ({children}) => {\n    // const [selectedProducts, setSelectedProducts] = useState(null);\n    // const value = {selectedProducts, setSelectedProducts};\n    const [isCartOpen, setIsCartOpen] = useState(false);\n    const [cartItems, setCartItems] = useState([]);\n    const [cartCount, setCartCount] = useState(0);\n\n    useEffect(() => {\n        const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n        setCartCount(newCartCount);\n    }, [cartItems])\n    \n\n    const addItemToCart = (productToAdd) => {\n        setCartItems(addCartItem(cartItems, productToAdd));\n    }\n\n    const removeItemFromCart = (productToRemove) => {\n        setCartItems(removeCartItem(cartItems, productToRemove));\n    }\n\n    const value = {isCartOpen, setIsCartOpen, addItemToCart, cartItems, cartCount, removeItemFromCart};\n    \n    // console.log(selectedProducts);\n    return(\n        <CartContext.Provider value={value}>\n            {children}\n        </CartContext.Provider>\n    )\n\n}\n"]},"metadata":{},"sourceType":"module"}