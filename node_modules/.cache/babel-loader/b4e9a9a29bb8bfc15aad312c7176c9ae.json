{"ast":null,"code":"var _jsxFileName = \"/Users/Bronko/Desktop/capstone/theShop/src/components/form-input/form-input.component.jsx\";\nimport React from \"react\";\nimport \"./form-input.styles.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormInput = _ref => {\n  let {\n    label,\n    ...otherProps\n  } = _ref;\n  //hier könnte man auch ein Objekt (inputOptions) übergeben aber ich mache das mit spread operator\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"group\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-input\",\n      ...otherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), label && /*#__PURE__*/_jsxDEV(\"label\", {\n      className: `${otherProps.value.length ? \"shrink\" : \"\"} form-input-label`,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n\n_c = FormInput;\nexport default FormInput; // if label exists, then render this label sagt er zu dem {label &&} oben. \n\nvar _c;\n\n$RefreshReg$(_c, \"FormInput\");","map":{"version":3,"sources":["/Users/Bronko/Desktop/capstone/theShop/src/components/form-input/form-input.component.jsx"],"names":["React","FormInput","label","otherProps","value","length"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,0BAAP;;;AAEA,MAAMC,SAAS,GAAG,QAA6B;AAAA,MAA3B;AAACC,IAAAA,KAAD;AAAQ,OAAGC;AAAX,GAA2B;AAAS;AACpD,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACI;AAAO,MAAA,SAAS,EAAC,YAAjB;AAAA,SAAkCA;AAAlC;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKD,KAAK,iBACF;AACI,MAAA,SAAS,EAAG,GAAEC,UAAU,CAACC,KAAX,CAAiBC,MAAjB,GAA0B,QAA1B,GAAqC,EAAG,mBAD1D;AAAA,gBAESH;AAFT;AAAA;AAAA;AAAA;AAAA,YAHR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAXD;;KAAMD,S;AAaN,eAAeA,SAAf,C,CAGA","sourcesContent":["import React from \"react\";\nimport \"./form-input.styles.scss\";\n\nconst FormInput = ( {label, ...otherProps}) => {        //hier könnte man auch ein Objekt (inputOptions) übergeben aber ich mache das mit spread operator\n    return (\n        <div className=\"group\">\n            <input className=\"form-input\" {...otherProps} />\n            {label && ( \n                <label \n                    className={`${otherProps.value.length ? \"shrink\" : \"\"} form-input-label`}>\n                        {label}\n                </label>)}\n        </div>\n    )\n}\n\nexport default FormInput;\n\n\n// if label exists, then render this label sagt er zu dem {label &&} oben. "]},"metadata":{},"sourceType":"module"}