{"ast":null,"code":"var _jsxFileName = \"/Users/Bronko/Desktop/capstone/theShop/src/context/cart.context.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  // find if cartItems contains productstoadd\n  // .find mehtod retuns boolean, und es soll nur true returnen, wenn bisherige cartitems id mit producttoaddId matched\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id); // if found, increment quantity also wenn in der Zeile hierüber ein cartItem gefunden wurde\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } // wenn das item mit dem addedItem id übereinstimmt, soll quantity addiert werden, weil es ja bereits im warenkorb ist\n    : cartItem // ansonsten soll das item einfach zum array neu hinzugefügt werden, weil es noch nicht im Warenkorb liegt\n    );\n  } // return new array with modified cartitems/ new cart item\n  // added product ist eine neues Produkt:\n\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }]; // wir erstellen ein neues array mit allen bisherigen cartitems, den products to add und quanitity extra\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); // check if quantity is equal to 1, if it is remove that item from cart\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== existingCartItem.id);\n  } // return back cartitems with matching cart item with reduced quanity\n\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};\n\nconst removeCartItemCompletely = (cartItems, cartItemToRemove) => {\n  return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n};\n\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  //also nicht den state setzen sondern addieren(das war mein Problem) -> nicht über useState\n  // selectedProducts: [],\n  // setSelectedProducts: () => null,\n  cartCount: 0,\n  removeItemFromCart: () => {},\n  removeAllQuantities: () => {},\n  cartTotal: 0\n});\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // const [selectedProducts, setSelectedProducts] = useState(null);\n  // const value = {selectedProducts, setSelectedProducts};\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n  const [cartCount, setCartCount] = useState(0);\n  const [cartTotal, setCartTotal] = useState(0);\n  useEffect(() => {\n    const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n    setCartCount(newCartCount);\n  }, [cartItems]);\n  useEffect(() => {\n    const newCartTotal = cartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0);\n    setCartTotal(newCartTotal);\n  }, [cartItems]);\n\n  const addItemToCart = productToAdd => {\n    setCartItems(addCartItem(cartItems, productToAdd));\n  };\n\n  const removeItemFromCart = cartItemToRemove => {\n    setCartItems(removeCartItem(cartItems, cartItemToRemove));\n  };\n\n  const removeAllQuantities = cartItemToClear => {\n    setCartItems(removeCartItemCompletely(cartItems, cartItemToClear));\n  };\n\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    cartItems,\n    cartCount,\n    removeItemFromCart,\n    removeAllQuantities,\n    cartTotal\n  }; // console.log(selectedProducts);\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"Q34pEVQNnwOC1WPCa5SwU/+yuyE=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/Bronko/Desktop/capstone/theShop/src/context/cart.context.jsx"],"names":["React","createContext","useEffect","useState","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","cartItemToRemove","filter","removeCartItemCompletely","CartContext","isCartOpen","setIsCartOpen","addItemToCart","cartCount","removeItemFromCart","removeAllQuantities","cartTotal","CartProvider","children","setCartItems","setCartCount","setCartTotal","newCartCount","reduce","total","newCartTotal","price","cartItemToClear","value"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\n\n\nconst addCartItem = (cartItems, productToAdd) => {\n    // find if cartItems contains productstoadd\n    // .find mehtod retuns boolean, und es soll nur true returnen, wenn bisherige cartitems id mit producttoaddId matched\n    const existingCartItem = cartItems.find((cartItem) => cartItem.id === productToAdd.id);\n\n    // if found, increment quantity also wenn in der Zeile hierüber ein cartItem gefunden wurde\n    if(existingCartItem) {\n        return cartItems.map((cartItem) => \n            cartItem.id === productToAdd.id\n                ? { ...cartItem, quantity: cartItem.quantity + 1 } // wenn das item mit dem addedItem id übereinstimmt, soll quantity addiert werden, weil es ja bereits im warenkorb ist\n                : cartItem  // ansonsten soll das item einfach zum array neu hinzugefügt werden, weil es noch nicht im Warenkorb liegt\n        ); \n    }\n\n    // return new array with modified cartitems/ new cart item\n    // added product ist eine neues Produkt:\n    return [...cartItems, {...productToAdd, quantity: 1}]; // wir erstellen ein neues array mit allen bisherigen cartitems, den products to add und quanitity extra\n}\n\n\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n    // find the cart item to remove\n    const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id);\n\n    // check if quantity is equal to 1, if it is remove that item from cart\n    if (existingCartItem.quantity === 1) {\n        return cartItems.filter(cartItem => cartItem.id !== existingCartItem.id);\n    }\n\n    // return back cartitems with matching cart item with reduced quanity\n    return cartItems.map(cartItem => \n        cartItem.id === cartItemToRemove.id\n        ? {...cartItem, quantity: cartItem.quantity - 1}\n        : cartItem\n        )\n}\n\nconst removeCartItemCompletely = (cartItems, cartItemToRemove) => {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n}\n\n\nexport const CartContext = createContext({\n    isCartOpen: false,\n    setIsCartOpen: () => {},\n    cartItems: [],\n    addItemToCart: () => {},      //also nicht den state setzen sondern addieren(das war mein Problem) -> nicht über useState\n    // selectedProducts: [],\n    // setSelectedProducts: () => null,\n    cartCount: 0,\n    removeItemFromCart: () => {},\n    removeAllQuantities: () => {},\n    cartTotal: 0\n});\n\n\nexport const CartProvider = ({children}) => {\n    // const [selectedProducts, setSelectedProducts] = useState(null);\n    // const value = {selectedProducts, setSelectedProducts};\n    const [isCartOpen, setIsCartOpen] = useState(false);\n    const [cartItems, setCartItems] = useState([]);\n    const [cartCount, setCartCount] = useState(0);\n    const [cartTotal, setCartTotal] = useState(0);\n\n    useEffect(() => {\n        const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n        setCartCount(newCartCount);\n    }, [cartItems])\n\n    useEffect(() => {\n        const newCartTotal = cartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0);\n        setCartTotal(newCartTotal);\n    }, [cartItems])\n    \n\n    const addItemToCart = (productToAdd) => {\n        setCartItems(addCartItem(cartItems, productToAdd));\n    }\n\n    const removeItemFromCart = (cartItemToRemove) => {\n        setCartItems(removeCartItem(cartItems, cartItemToRemove));\n    }\n\n    const removeAllQuantities = (cartItemToClear) => {\n        setCartItems(removeCartItemCompletely(cartItems, cartItemToClear));\n    }\n\n    const value = {isCartOpen, setIsCartOpen, addItemToCart, cartItems, cartCount, removeItemFromCart, removeAllQuantities, cartTotal};\n    \n    // console.log(selectedProducts);\n    return(\n        <CartContext.Provider value={value}>\n            {children}\n        </CartContext.Provider>\n    )\n\n}\n"]},"metadata":{},"sourceType":"module"}