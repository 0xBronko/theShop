{"ast":null,"code":"var _jsxFileName = \"/Users/Bronko/Desktop/capstone/theShop/src/components/sign-in/sign-in.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { createAuthUserWithEmailAndPassword } from \"../../utils/firebase/firebase.utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst defaultFormFields = {\n  displayName: \"\",\n  mail: \"\",\n  password: \"\",\n  confirmPassword: \"\"\n};\n\nconst SignInForm = () => {\n  _s();\n\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const {\n    displayName,\n    mail,\n    password,\n    confirmPassword\n  } = formFields; // damit wir die in den input feldern direkt targetieren können\n  // hierduch wird der state aber nichtgeändert, sondern nur entsprehcnend targetiert. geändert erst unter setFormFields\n  // console.log(formFields)\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    console.log(password); // if()\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    console.log(name);\n    setFormFields({ ...formFields,\n      // alle nicht geänderten Felder bleiben so, wie sie aktuell sind mit ...formFields\n      [name]: value // Computed Property Names --> [name]: holt sich den namen des aktuell triggernden InputFeldes -- Dynamic Keys\n\n    }); // value ist der aktuelle wert des entsprechenden Inputfelds (mail: \"wert, der gerade ins mail feld eingetragen wird\")\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Please sign in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: () => handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"displayName\",\n        children: \"Display Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        required: true,\n        type: \"text\",\n        name: \"displayName\",\n        onChange: handleChange,\n        value: displayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"mail\",\n        children: \"E-Mail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        required: true,\n        type: \"email\",\n        name: \"mail\",\n        onChange: handleChange,\n        value: mail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Passwort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        required: true,\n        type: \"password\",\n        name: \"password\",\n        onChange: handleChange,\n        value: password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"confirmPassword\",\n        children: \"Passwort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        required: true,\n        type: \"password\",\n        name: \"confirmPassword\",\n        onChange: handleChange,\n        value: confirmPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SignInForm, \"BSTP5B8VO6H/Fwu712VTuD9hH54=\");\n\n_c = SignInForm;\nexport default SignInForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignInForm\");","map":{"version":3,"sources":["/Users/Bronko/Desktop/capstone/theShop/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","createAuthUserWithEmailAndPassword","defaultFormFields","displayName","mail","password","confirmPassword","SignInForm","formFields","setFormFields","handleSubmit","event","preventDefault","console","log","handleChange","name","value","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,kCAAT,QAAmD,qCAAnD;;;AAEA,MAAMC,iBAAiB,GAAG;AACtBC,EAAAA,WAAW,EAAE,EADS;AAEtBC,EAAAA,IAAI,EAAE,EAFgB;AAGtBC,EAAAA,QAAQ,EAAE,EAHY;AAItBC,EAAAA,eAAe,EAAE;AAJK,CAA1B;;AAQA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAACE,iBAAD,CAA5C;AACA,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,IAAf;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA;AAA/B,MAAkDE,UAAxD,CAFqB,CAEgD;AACA;AAErE;;AAEA,QAAME,YAAY,GAAG,MAAOC,KAAP,IAAiB;AAClCA,IAAAA,KAAK,CAACC,cAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ,EAFkC,CAGlC;AAEH,GALD;;AAOA,QAAMU,YAAY,GAAIJ,KAAD,IAAW;AAC5B,UAAM;AAAEK,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBN,KAAK,CAACO,MAA9B;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AAEAP,IAAAA,aAAa,CAAC,EACV,GAAGD,UADO;AACsB;AAChC,OAACQ,IAAD,GAAQC,KAFE,CAEsB;;AAFtB,KAAD,CAAb,CAJ4B,CAOQ;AACvC,GARD;;AAUA,sBACI;AAAA,4BACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADL,eAEI;AAAM,MAAA,QAAQ,EAAE,MAAMP,YAAtB;AAAA,8BACI;AAAO,QAAA,OAAO,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,QAAQ,MAAf;AAAgB,QAAA,IAAI,EAAC,MAArB;AAA4B,QAAA,IAAI,EAAC,aAAjC;AAA+C,QAAA,QAAQ,EAAEK,YAAzD;AAAuE,QAAA,KAAK,EAAEZ;AAA9E;AAAA;AAAA;AAAA;AAAA,cAFJ,eAII;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAO,QAAA,QAAQ,MAAf;AAAgB,QAAA,IAAI,EAAC,OAArB;AAA6B,QAAA,IAAI,EAAC,MAAlC;AAAyC,QAAA,QAAQ,EAAEY,YAAnD;AAAiE,QAAA,KAAK,EAAEX;AAAxE;AAAA;AAAA;AAAA;AAAA,cALJ,eAOI;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,eAQI;AAAO,QAAA,QAAQ,MAAf;AAAgB,QAAA,IAAI,EAAC,UAArB;AAAgC,QAAA,IAAI,EAAC,UAArC;AAAgD,QAAA,QAAQ,EAAEW,YAA1D;AAAwE,QAAA,KAAK,EAAEV;AAA/E;AAAA;AAAA;AAAA;AAAA,cARJ,eAUI;AAAO,QAAA,OAAO,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ,eAWI;AAAO,QAAA,QAAQ,MAAf;AAAgB,QAAA,IAAI,EAAC,UAArB;AAAgC,QAAA,IAAI,EAAC,iBAArC;AAAuD,QAAA,QAAQ,EAAEU,YAAjE;AAA+E,QAAA,KAAK,EAAET;AAAtF;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAmBH,CA3CD;;GAAMC,U;;KAAAA,U;AA6CN,eAAeA,UAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport { createAuthUserWithEmailAndPassword } from \"../../utils/firebase/firebase.utils\";\n\nconst defaultFormFields = {\n    displayName: \"\", \n    mail: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n};\n\n\nconst SignInForm = () => {\n    const [formFields, setFormFields] = useState(defaultFormFields);\n    const { displayName, mail, password, confirmPassword} = formFields;  // damit wir die in den input feldern direkt targetieren können\n                                                                         // hierduch wird der state aber nichtgeändert, sondern nur entsprehcnend targetiert. geändert erst unter setFormFields\n\n    // console.log(formFields)\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        console.log(password)        \n        // if()\n\n    }\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        console.log(name)\n\n        setFormFields({                     \n            ...formFields,                  // alle nicht geänderten Felder bleiben so, wie sie aktuell sind mit ...formFields\n            [name]: value                   // Computed Property Names --> [name]: holt sich den namen des aktuell triggernden InputFeldes -- Dynamic Keys\n        })                                  // value ist der aktuelle wert des entsprechenden Inputfelds (mail: \"wert, der gerade ins mail feld eingetragen wird\")\n    }                                                                  \n\n    return (\n        <>\n             <h1>Please sign in</h1>\n            <form onSubmit={() => handleSubmit}>\n                <label htmlFor=\"displayName\">Display Name</label>\n                <input required type=\"text\" name=\"displayName\" onChange={handleChange} value={displayName} />\n\n                <label htmlFor=\"mail\">E-Mail</label>\n                <input required type=\"email\" name=\"mail\" onChange={handleChange} value={mail} />\n\n                <label htmlFor=\"password\">Passwort</label>\n                <input required type=\"password\" name=\"password\" onChange={handleChange} value={password} />\n\n                <label htmlFor=\"confirmPassword\">Passwort</label>\n                <input required type=\"password\" name=\"confirmPassword\" onChange={handleChange} value={confirmPassword} />\n\n            </form>\n        </>\n    )\n}\n\nexport default SignInForm;"]},"metadata":{},"sourceType":"module"}