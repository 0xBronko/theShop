{"ast":null,"code":"var _jsxFileName = \"/Users/Bronko/Desktop/capstone/theShop/src/components/button/button.component.jsx\";\nimport React from \"react\";\nimport \"./button.styles.scss\"; // we know that we are going to have 3 different button types, so... how to make this component generic and availabale for all\n// three types?\n// create variable buttontypes -> if the value passed is the string \"xyz\" dann soll folgende klasse hier ausgegeben werden\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BUTTON_TYPE_CLASSES = {\n  google: \"google-sign-in\",\n  inverted: \"inverted\"\n};\n\nconst Button = _ref => {\n  let {\n    text,\n    buttonType,\n    ...otherProps\n  } = _ref;\n  //Children ist hier einfach der Text, der im parent \n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `button-container ${BUTTON_TYPE_CLASSES[buttonType]}`,\n    ...otherProps,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Button;\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/Bronko/Desktop/capstone/theShop/src/components/button/button.component.jsx"],"names":["React","BUTTON_TYPE_CLASSES","google","inverted","Button","text","buttonType","otherProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sBAAP,C,CAEA;AACA;AACA;;;AAEA,MAAMC,mBAAmB,GAAG;AACxBC,EAAAA,MAAM,EAAE,gBADgB;AAExBC,EAAAA,QAAQ,EAAE;AAFc,CAA5B;;AAMA,MAAMC,MAAM,GAAG,QAAuC;AAAA,MAAtC;AAACC,IAAAA,IAAD;AAAOC,IAAAA,UAAP;AAAmB,OAAGC;AAAtB,GAAsC;AAAE;AACpD,sBACI;AAAQ,IAAA,SAAS,EAAG,oBAAmBN,mBAAmB,CAACK,UAAD,CAAa,EAAvE;AAAA,OACKC,UADL;AAAA,cAEKF;AAFL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAND;;KAAMD,M;AAQN,eAAeA,MAAf","sourcesContent":["import React from \"react\";\nimport \"./button.styles.scss\"\n\n// we know that we are going to have 3 different button types, so... how to make this component generic and availabale for all\n// three types?\n// create variable buttontypes -> if the value passed is the string \"xyz\" dann soll folgende klasse hier ausgegeben werden\n\nconst BUTTON_TYPE_CLASSES = {\n    google: \"google-sign-in\",\n    inverted: \"inverted\"\n};\n\n\nconst Button = ({text, buttonType, ...otherProps}) => { //Children ist hier einfach der Text, der im parent \n    return(\n        <button className={`button-container ${BUTTON_TYPE_CLASSES[buttonType]}`}\n         {...otherProps}>\n            {text}</button>\n    )\n}\n\nexport default Button;"]},"metadata":{},"sourceType":"module"}